# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: terraform-large-data-sharing-golang-webapp
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: Large Data Sharing Golang Web App
    source:
      repo: https://github.com/GoogleCloudPlatform/terraform-large-data-sharing-golang-webapp.git
      sourceType: git
      dir: /infra
    description:
      tagline: Create a web app to share large quantities of files to users across the globe
      detailed: This solution provides an end-to-end demonstration on how a developer would architect an application that can handle large quantities of files operations on GCP. The goal of this solution is to utilize Google Cloud CDN to serve large quantities of files.
    deploymentDuration:
      configurationSecs: 60
      deploymentSecs: 300
    costEstimate:
      description: cost details
      url: https://cloud.google.com/products/calculator#id=d2ad2fa1-53ea-4ea4-bbfb-490f69611e0a
    cloudProducts:
    - productId: SERVERLESS_SECTION
      pageUrl: run
      label: Cloud Run
    - productId: LOAD_BALANCING_SECTION
      pageUrl: net-services/loadbalancing
      label: Cloud LoadBalancer
    - productId: search_FILESTORE_SECTION
      pageUrl: filestore
      label: Filestore
    - productId: STORAGE_SECTION
      pageUrl: storage
      label: Cloud Storage
    - productId: LOAD_BALANCING_SECTION
      pageUrl: net-services/cdn
  content:
    architecture:
      diagramUrl: www.gstatic.com/pantheon/images/solutions/large_data_sharing_golang_webapp_architecture_v1.svg
      description:
      - User requests to upload files are routed to the front end using a load balancer.
      - The frontend routes these requests to the backend, which uses Cloud Run.
      - The backend stores the files (i.e., data) in Cloud Storage and the metadata in Firestore.
      - User requests to view a file are routed to the Cloud CDN if there is a CDN cache hit.
      - User requests to view a file are routed to the Cloud Storage if there is a CDN cache miss.
    documentation:
    - title: Large Data Sharing Golang Web App
      url: https://cloud.google.com/architecture/big-data-analytics/large-data-sharing-go
    - title: Tutorial Walkthrough ID
      url: solutions-in-console--large-data-sharing--large-data-sharing-golang_tour
    subBlueprints:
    - name: cloudrun
      location: modules/cloudrun
    - name: firestore
      location: modules/firestore
    - name: load-balancer
      location: modules/load-balancer
    - name: networking
      location: modules/networking
    - name: storage
      location: modules/storage
    examples:
    - name: simple_example
      location: examples/simple_example
  interfaces:
    variables:
    - name: bucket_location
      description: Bucket location. https://cloud.google.com/storage/docs/locations
      varType: string
      defaultValue: US
    - name: disable_services_on_destroy
      description: Whether project services will be disabled when the resources are destroyed.
      varType: bool
      defaultValue: false
    - name: init
      description: Initialize resource or not
      varType: bool
      defaultValue: true
    - name: labels
      description: A map of key/value label pairs to assign to the resources.
      varType: map(string)
      defaultValue:
        app: large-data-sharing-golang
    - name: lds_client_image
      description: Docker image for frontend
      varType: string
      defaultValue: gcr.io/hsa-public/hsa-lds-golang-frontend:latest
    - name: lds_firestore
      description: Firestore collection id
      varType: string
      defaultValue: fileMetadata-cdn
    - name: lds_firestore_field_name
      description: 'Firestore field: name'
      varType: string
      defaultValue: name
    - name: lds_firestore_field_orderNo
      description: 'Firestore field: orderNo'
      varType: string
      defaultValue: orderNo
    - name: lds_firestore_field_path
      description: 'Firestore field: path'
      varType: string
      defaultValue: path
    - name: lds_firestore_field_size
      description: 'Firestore field: size'
      varType: string
      defaultValue: size
    - name: lds_firestore_field_tags
      description: 'Firestore field: tags'
      varType: string
      defaultValue: tags
    - name: lds_initialization_archive_file_name
      description: Archive file's name in lds-initialization bucket
      varType: string
      defaultValue: initialization.tar.gz
    - name: lds_initialization_bucket_name
      description: Bucket for cloud run job
      varType: string
      defaultValue: jss-resources
    - name: lds_server_image
      description: Docker image for backend
      varType: string
      defaultValue: gcr.io/hsa-public/hsa-lds-golang-backend:latest
    - name: project_id
      description: GCP project ID.
      varType: string
      required: true
    - name: region
      description: Google cloud region where the resource will be created.
      varType: string
      defaultValue: us-west1
    outputs:
    - name: backend_bucket_name
      description: The name of the backend bucket used for Cloud CDN
    - name: bucket_name
      description: Bucket name
    - name: lb_external_ip
      description: Frontend IP address of the load balancer
    - name: neos_walkthrough_url
      description: Neos Tutorial URL
  requirements:
    roles:
    - level: Project
      roles:
      - roles/storage.admin
      - roles/datastore.owner
      - roles/appengine.appAdmin
      - roles/compute.admin
      - roles/compute.networkAdmin
      - roles/cloudtrace.admin
      - roles/iam.serviceAccountAdmin
      - roles/iam.serviceAccountUser
      - roles/resourcemanager.projectIamAdmin
      - roles/run.admin
      - roles/monitoring.admin
      - roles/vpcaccess.admin
    services:
    - cloudresourcemanager.googleapis.com
    - compute.googleapis.com
    - run.googleapis.com
    - iam.googleapis.com
    - firestore.googleapis.com
    - vpcaccess.googleapis.com
    - serviceusage.googleapis.com
    - monitoring.googleapis.com
    - cloudtrace.googleapis.com
